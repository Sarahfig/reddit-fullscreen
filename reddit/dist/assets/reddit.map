{"version":3,"sources":["vendor/ember-cli/app-prefix.js","reddit/app.js","reddit/components/app-version.js","reddit/components/reddit-list.js","reddit/components/reddit-post.js","reddit/controllers/array.js","reddit/controllers/authenticate.js","reddit/controllers/index.js","reddit/controllers/object.js","reddit/initializers/app-version.js","reddit/initializers/export-application-global.js","reddit/initializers/services.js","reddit/router.js","reddit/routes/application.js","reddit/routes/authenticate.js","reddit/routes/index.js","reddit/services/api.js","reddit/services/keybindings.js","reddit/services/session.js","reddit/templates/application.js","reddit/templates/authenticate.js","reddit/templates/components/reddit-list.js","reddit/templates/components/reddit-post.js","reddit/templates/index.js","reddit/tests/app.jshint.js","reddit/tests/components/reddit-list.jshint.js","reddit/tests/components/reddit-post.jshint.js","reddit/tests/controllers/authenticate.jshint.js","reddit/tests/controllers/index.jshint.js","reddit/tests/helpers/resolver.js","reddit/tests/helpers/resolver.jshint.js","reddit/tests/helpers/start-app.js","reddit/tests/helpers/start-app.jshint.js","reddit/tests/initializers/services.jshint.js","reddit/tests/integration/components/reddit-list-test.js","reddit/tests/integration/components/reddit-list-test.jshint.js","reddit/tests/integration/components/reddit-post-test.js","reddit/tests/integration/components/reddit-post-test.jshint.js","reddit/tests/router.jshint.js","reddit/tests/routes/application.jshint.js","reddit/tests/routes/authenticate.jshint.js","reddit/tests/routes/index.jshint.js","reddit/tests/services/api.jshint.js","reddit/tests/services/keybindings.jshint.js","reddit/tests/services/session.jshint.js","reddit/tests/test-helper.js","reddit/tests/test-helper.jshint.js","reddit/tests/unit/controllers/application-test.js","reddit/tests/unit/controllers/application-test.jshint.js","reddit/tests/unit/controllers/authenticate-test.js","reddit/tests/unit/controllers/authenticate-test.jshint.js","reddit/tests/unit/controllers/index-test.js","reddit/tests/unit/controllers/index-test.jshint.js","reddit/tests/unit/initializers/services-test.js","reddit/tests/unit/initializers/services-test.jshint.js","reddit/tests/unit/models/application-test.js","reddit/tests/unit/models/application-test.jshint.js","reddit/tests/unit/routes/application-test.js","reddit/tests/unit/routes/application-test.jshint.js","reddit/tests/unit/routes/authenticate-test.js","reddit/tests/unit/routes/authenticate-test.jshint.js","reddit/tests/unit/routes/index-test.js","reddit/tests/unit/routes/index-test.jshint.js","reddit/tests/unit/services/ajax-test.js","reddit/tests/unit/services/ajax-test.jshint.js","reddit/tests/unit/services/api-test.js","reddit/tests/unit/services/api-test.jshint.js","reddit/tests/unit/services/keybindings-test.js","reddit/tests/unit/services/keybindings-test.jshint.js","reddit/tests/unit/services/session-test.js","reddit/tests/unit/services/session-test.jshint.js","reddit/tests/unit/utils/ajax-test.js","reddit/tests/unit/utils/ajax-test.jshint.js","reddit/tests/utils/ajax.jshint.js","reddit/utils/ajax.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["\"use strict\";\n/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('reddit/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'reddit/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('reddit/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'reddit/config/environment'], function (exports, AppVersionComponent, config) {\n\n  'use strict';\n\n  var _config$APP = config['default'].APP;\n  var name = _config$APP.name;\n  var version = _config$APP.version;\n\n  exports['default'] = AppVersionComponent['default'].extend({\n    version: version,\n    name: name\n  });\n\n});","define('reddit/components/reddit-list', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend({\n\t\tinit: function init() {\n\t\t\tEmber['default'].$(window).keypress(Ember['default'].run.bind(this, this.keyPress));\n\t\t\tthis._super.apply(this);\n\t\t},\n\t\tkeyPress: function keyPress(e) {\n\t\t\tvar key = this.bindings.keyMap[e.keyCode];\n\t\t\tvar functions = this.bindings.functions;\n\t\t\tif (key === functions.nextPost.getKey()) {\n\t\t\t\tthis.sendAction('nextPost', e);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (key === functions.previousPost.getKey()) {\n\t\t\t\tthis.sendAction('previousPost', e);\n\t\t\t\treturn;\n\t\t\t}\n\t\t},\n\t\tactions: {\n\t\t\tupVote: function upVote() {\n\t\t\t\tthis.sendAction('upVote');\n\t\t\t},\n\t\t\tdownVote: function downVote() {\n\t\t\t\tthis.sendAction('downVote');\n\t\t\t}\n\t\t}\n\t});\n\n});","define('reddit/components/reddit-post', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend({\n\t\tclassNameBindings: ['isCurrent:current', 'isPrevious:previous', 'isNext:next', 'isUpVoted:upvoted', 'isDownVoted:downvoted'],\n\t\tisCurrent: (function () {\n\t\t\treturn this.get('post.isCurrent');\n\t\t}).property('post.isCurrent'),\n\t\tisPrevious: (function () {\n\t\t\treturn this.get('post.isPrevious');\n\t\t}).property('post.isPrevious'),\n\t\tisNext: (function () {\n\t\t\treturn this.get('post.isNext');\n\t\t}).property('post.isNext'),\n\t\tisUpVoted: (function () {\n\t\t\treturn this.get('post.isUpVoted');\n\t\t}).property('post.isUpVoted'),\n\t\tisDownVoted: (function () {\n\t\t\treturn this.get('post.isDownVoted');\n\t\t}).property('post.isDownVoted'),\n\t\tinit: function init() {\n\t\t\tif (this.attrs.post.value.isCurrent) {\n\t\t\t\tthis.bindKeyPress = Ember['default'].run.bind(this, this.globalKeyPress);\n\t\t\t\tEmber['default'].$(window).bind('keypress', this.bindKeyPress);\n\t\t\t}\n\t\t\tthis._super.apply(this);\n\t\t},\n\t\tbindKeyPress: null,\n\t\tglobalKeyPress: function globalKeyPress(e) {\n\t\t\tif (!this.get('post')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar key = this.bindings.keyMap[e.keyCode];\n\t\t\tvar functions = this.bindings.functions;\n\t\t\tif (key === functions.upVote.getKey()) {\n\t\t\t\tthis.sendAction('upVote');\n\t\t\t\tif (this.get('post.isUpVoted')) {\n\t\t\t\t\tthis.set('post.isUpVoted', false);\n\t\t\t\t} else {\n\t\t\t\t\tthis.set('post.isUpVoted', true);\n\t\t\t\t}\n\t\t\t\tthis.set('post.isDownVoted', false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (key === functions.downVote.getKey()) {\n\t\t\t\tthis.sendAction('downVote');\n\t\t\t\tif (this.get('post.isDownVoted')) {\n\t\t\t\t\tthis.set('post.isDownVoted', false);\n\t\t\t\t} else {\n\t\t\t\t\tthis.set('post.isDownVoted', true);\n\t\t\t\t}\n\t\t\t\tthis.set('post.isUpVoted', false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t});\n\n});","define('reddit/controllers/array', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('reddit/controllers/authenticate', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tconsole.log('authenticate');\n\texports['default'] = Ember['default'].Controller.extend({});\n\n});","define('reddit/controllers/index', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller.extend({\n\t\tcurrentIndex: 0,\n\t\tpreviousIndex: function previousIndex() {\n\t\t\treturn this.currentIndex - 1;\n\t\t},\n\t\tnextIndex: function nextIndex() {\n\t\t\treturn this.currentIndex + 1;\n\t\t},\n\t\tlist: (function () {\n\t\t\tvar list = JSON.parse(JSON.stringify(this.get('model.list')));\n\t\t\tvar displayed = [];\n\t\t\tif (list[this.previousIndex()]) {\n\t\t\t\tdisplayed.push(list[this.previousIndex()]);\n\t\t\t\tdisplayed[0].isPrevious = true;\n\t\t\t}\n\t\t\tdisplayed.push(list[this.currentIndex]);\n\t\t\tdisplayed[displayed.length - 1].isCurrent = true;\n\t\t\tif (list[this.nextIndex()]) {\n\t\t\t\tdisplayed.push(list[this.nextIndex()]);\n\t\t\t\tdisplayed[displayed.length - 1].isNext = true;\n\t\t\t}\n\t\t\treturn displayed;\n\t\t}).property('model.list', 'currentIndex'),\n\t\tactions: {\n\t\t\tnextPost: function nextPost() {\n\t\t\t\tif (this.currentIndex < this.get('model.list').length - 1) {\n\t\t\t\t\tthis.set('currentIndex', this.currentIndex + 1);\n\n\t\t\t\t\tif (this.currentIndex === this.get('model.list').length - 2) {\n\t\t\t\t\t\t//load more\n\t\t\t\t\t\tthis.send('getMore');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpreviousPost: function previousPost() {\n\t\t\t\tif (this.currentIndex) {\n\t\t\t\t\tthis.set('currentIndex', this.currentIndex - 1);\n\t\t\t\t}\n\t\t\t},\n\t\t\tupVote: function upVote() {\n\t\t\t\tvar list = this.get('model.list');\n\t\t\t\tvar current = this.get('currentIndex');\n\t\t\t\tvar post = null;\n\t\t\t\tlist.forEach(function (item, index) {\n\t\t\t\t\tif (index === current) {\n\t\t\t\t\t\tpost = item;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (post.isUpVoted) {\n\t\t\t\t\tthis.api.post.removeVote(post.name);\n\t\t\t\t\tpost.isUpVoted = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.api.post.upVote(post.name);\n\t\t\t\t\tpost.isUpVoted = true;\n\t\t\t\t}\n\t\t\t\tpost.isDownVoted = false;\n\t\t\t},\n\t\t\tdownVote: function downVote() {\n\t\t\t\tvar list = this.get('model.list');\n\t\t\t\tvar current = this.get('currentIndex');\n\t\t\t\tvar post = null;\n\t\t\t\tlist.forEach(function (item, index) {\n\t\t\t\t\tif (index === current) {\n\t\t\t\t\t\tpost = item;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (post.isDownVoted) {\n\t\t\t\t\tthis.api.post.removeVote(post.name);\n\t\t\t\t\tpost.isDownVoted = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.api.post.upVote(post.name);\n\t\t\t\t\tpost.isDownVoted = true;\n\t\t\t\t}\n\t\t\t\tpost.isUpVoted = false;\n\t\t\t}\n\t\t}\n\t});\n\n});","define('reddit/controllers/object', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('reddit/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'reddit/config/environment'], function (exports, initializerFactory, config) {\n\n  'use strict';\n\n  var _config$APP = config['default'].APP;\n  var name = _config$APP.name;\n  var version = _config$APP.version;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: initializerFactory['default'](name, version)\n  };\n\n});","define('reddit/initializers/export-application-global', ['exports', 'ember', 'reddit/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (config['default'].exportApplicationGlobal !== false) {\n      var value = config['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember['default'].String.classify(config['default'].modulePrefix);\n      }\n\n      if (!window[globalName]) {\n        window[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete window[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('reddit/initializers/services', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    // application.register('service:session', application.session);\n    // application.register('service:api', application.api);\n\n    //inject into routes\n    application.inject('route', 'session', 'service:session');\n    application.inject('route', 'api', 'service:api');\n\n    //inject into components\n    application.inject('component', 'bindings', 'service:keybindings');\n\n    //inject into controllers\n    application.inject('controller', 'api', 'service:api');\n\n    //inject into services\n    application.inject('service:api', 'session', 'service:session');\n    //application.inject('service:api', 'ajax', 'util:ajax');\n  }\n\n  exports['default'] = {\n    name: 'services',\n    initialize: initialize\n  };\n\n});","define('reddit/router', ['exports', 'ember', 'reddit/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route('index', { path: '/' });\n    this.route('authenticate');\n  });\n\n  exports['default'] = Router;\n\n});","define('reddit/routes/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model() {\n      return {\n        user: this.session.account.user()\n      };\n    }\n  });\n\n});","define('reddit/routes/authenticate', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    beforeModel: function beforeModel() {\n      var self = this;\n      var fn = self.functions;\n      var token = fn.getToken(self);\n      console.log('got token:', token);\n      if (!token) {\n        return;\n      }\n      self.api.account.getMe().then(function (response) {\n        self.session.set('accountUser', response);\n        self.transitionTo('index');\n      });\n    },\n\n    functions: {\n      getToken: function getToken($scope) {\n        if (window.location.hash.length > 2) {\n          var params = {};\n          window.location.hash.substring(1).split('&').forEach(function (value) {\n            value = value.split('=');\n            params[value[0]] = value[1];\n          });\n          if (params.state !== $scope.session.auth.state()) {\n            console.error('State mismatch!');\n            $scope.session.set('authState', '');\n            return false;\n          }\n          $scope.session.set('authToken', params.access_token);\n          $scope.session.set('authExpires', new Date().getTime() + params.expires_in * 1000);\n          return params.access_token;\n        }\n        console.log($scope.session.auth.expires() < new Date().getTime());\n        if (!$scope.session.auth.token() || $scope.session.auth.expires() < new Date().getTime()) {\n          var state = Math.random().toString(36).substring(7);\n          $scope.session.set('authState', state);\n          window.location.replace('https://www.reddit.com/api/v1/authorize?client_id=ZWE3iZH2TyAp8g&response_type=token&state=' + state + '&redirect_uri=http://localhost:4200/authenticate&scope=identity,edit,history,mysubreddits,read,save,submit,vote');\n          return false;\n        }\n      }\n    }\n  });\n\n});","define('reddit/routes/index', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({\n\t\tbeforeModel: function beforeModel() {\n\t\t\tif (this.session.auth.needed()) {\n\t\t\t\tthis.transitionTo('authenticate');\n\t\t\t}\n\t\t},\n\t\tmodel: function model() {\n\t\t\tvar self = this;\n\t\t\treturn this.api.front.get().then(function (response) {\n\t\t\t\tvar model = {};\n\t\t\t\tmodel.after = response.data.after;\n\t\t\t\tmodel.list = self.parse(response.data.children);\n\t\t\t\treturn model;\n\t\t\t});\n\t\t},\n\t\tparse: function parse(list) {\n\t\t\treturn list.map(function (item) {\n\t\t\t\tvar data = item.data,\n\t\t\t\t    parsed = {\n\t\t\t\t\tauthor: data.author,\n\t\t\t\t\tcomments: data.permalink,\n\t\t\t\t\tcreated: data.created,\n\t\t\t\t\tdomain: data.domain,\n\t\t\t\t\tdowns: data.downs,\n\t\t\t\t\tid: data.id,\n\t\t\t\t\tisSelf: data.is_self,\n\t\t\t\t\tmedia: data.media,\n\t\t\t\t\tembed: data.media_embed,\n\t\t\t\t\tname: data.name,\n\t\t\t\t\tnumComments: data.num_comments,\n\t\t\t\t\tnsfw: data.over_18,\n\t\t\t\t\tsaved: data.saved,\n\t\t\t\t\tscore: data.score,\n\t\t\t\t\tsubreddit: data.subreddit,\n\t\t\t\t\tsubredditId: data.subreddit_id,\n\t\t\t\t\tthumbnail: data.thumbnail,\n\t\t\t\t\ttitle: data.title,\n\t\t\t\t\tups: data.ups,\n\t\t\t\t\turl: data.url\n\t\t\t\t};\n\t\t\t\tif (parsed.thumbnail === 'self' || !parsed.thumbnail) {\n\t\t\t\t\tparsed.hasThumbnail = false;\n\t\t\t\t} else {\n\t\t\t\t\tparsed.hasThumbnail = true;\n\t\t\t\t}\n\t\t\t\tif (!parsed.media) {\n\t\t\t\t\tif (parsed.url.toLowerCase().match(/\\.(jpg|png|gif)/g)) {\n\t\t\t\t\t\tparsed.isImage = true;\n\t\t\t\t\t} else if (parsed.url.indexOf('imgur.com/a/') !== -1) {\n\t\t\t\t\t\tparsed.isAlbum = true;\n\t\t\t\t\t} else if (parsed.url.indexOf('imgur.com/') !== -1) {\n\t\t\t\t\t\tparsed.isImage = true;\n\t\t\t\t\t\tparsed.url = parsed.url + '.jpg';\n\t\t\t\t\t} else if (parsed.url.indexOf('livememe.com/') !== -1) {\n\t\t\t\t\t\tparsed.isImage = true;\n\t\t\t\t\t\tvar id = parsed.url.split('com/')[1];\n\t\t\t\t\t\tparsed.url = 'http://e.lvme.me/' + id + '.jpg';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparsed.isArticle = true;\n\t\t\t\t\t\tif (parsed.thumbnail === 'self' || !parsed.thumbnail) {\n\t\t\t\t\t\t\tparsed.isArticleNoThumbnail = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparsed.isArticleThumbnail = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (parsed.media.oembed.type === 'video') {\n\t\t\t\t\t\tparsed.isVideo = true;\n\t\t\t\t\t\tparsed.html = Ember['default'].$('<div/>').html(parsed.media.oembed.html).text();\n\t\t\t\t\t} else if (parsed.url.indexOf('imgur.com/a/') !== -1) {\n\t\t\t\t\t\tparsed.isAlbum = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('unsupported media type', parsed);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn parsed;\n\t\t\t});\n\t\t},\n\t\tactions: {\n\t\t\tgetMore: function getMore() {\n\t\t\t\tvar after = this.get('context.after');\n\t\t\t\tvar self = this;\n\t\t\t\tconsole.log(self);\n\t\t\t\tthis.api.front.getMore(after).then(function (response) {\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n});","define('reddit/services/api', ['exports', 'ember', 'reddit/utils/ajax'], function (exports, Ember, Ajax) {\n\n\t'use strict';\n\n\tvar domain = 'https://oauth.reddit.com/',\n\t    base = domain + 'api/',\n\t    token = function token() {\n\t\treturn 'Bearer ' + localStorage.authToken;\n\t},\n\t    auth = function auth() {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Authorization': token()\n\t\t\t}\n\t\t};\n\t};\n\n\texports['default'] = Ember['default'].Service.extend({\n\t\taccount: {\n\t\t\tgetMe: function getMe() {\n\t\t\t\treturn new Ajax['default']().get(base + 'v1/me', null, auth());\n\t\t\t}\n\t\t},\n\t\tfront: {\n\t\t\tget: function get() {\n\t\t\t\treturn new Ajax['default']().get(domain, null, auth());\n\t\t\t},\n\t\t\tgetMore: function getMore(after) {\n\t\t\t\treturn new Ajax['default']().get(domain, { after: after }, auth());\n\t\t\t}\n\t\t},\n\t\tpost: {\n\t\t\tupVote: function upVote(id) {\n\t\t\t\treturn new Ajax['default']().post(base + 'vote', {\n\t\t\t\t\tid: id,\n\t\t\t\t\tdir: 1\n\t\t\t\t}, auth());\n\t\t\t},\n\t\t\tdownVote: function downVote(id) {\n\t\t\t\treturn new Ajax['default']().post(base + 'vote', {\n\t\t\t\t\tid: id,\n\t\t\t\t\tdir: -1\n\t\t\t\t}, auth());\n\t\t\t},\n\t\t\tremoveVote: function removeVote(id) {\n\t\t\t\treturn new Ajax['default']().post(base + 'vote', {\n\t\t\t\t\tid: id,\n\t\t\t\t\tdir: 0\n\t\t\t\t}, auth());\n\t\t\t}\n\t\t}\n\t});\n\n});","define('reddit/services/keybindings', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar KeyFunction = function KeyFunction(data) {\n\t\tEmber['default'].$.extend(this, data);\n\t\tthis.user = function () {\n\t\t\treturn localStorage[data.name] ? localStorage[data.name] : 'default';\n\t\t};\n\t\treturn this;\n\t};\n\tKeyFunction.prototype.getKey = function () {\n\t\tif (this.user() === 'default') {\n\t\t\treturn this['default'];\n\t\t}\n\t\treturn this.user();\n\t};\n\texports['default'] = Ember['default'].Service.extend({\n\t\tfunctions: {\n\t\t\tnextPost: new KeyFunction({\n\t\t\t\t'default': 'D',\n\t\t\t\tdescription: 'Move to next post',\n\t\t\t\tname: 'keyNextPost'\n\t\t\t}),\n\t\t\tpreviousPost: new KeyFunction({\n\t\t\t\t'default': 'A',\n\t\t\t\tdescription: 'Move to previous post',\n\t\t\t\tname: 'keyPreviousPost'\n\t\t\t}),\n\t\t\tupVote: new KeyFunction({\n\t\t\t\t'default': 'W',\n\t\t\t\tdescription: 'Upvote currently viewed post',\n\t\t\t\tname: 'keyUpvote'\n\t\t\t}),\n\t\t\tdownVote: new KeyFunction({\n\t\t\t\t'default': 'S',\n\t\t\t\tdescription: 'Downvote currently viewed post',\n\t\t\t\tname: 'keyDownVote'\n\t\t\t})\n\t\t},\n\t\tkeyMap: {\n\t\t\t97: 'A',\n\t\t\t98: 'B',\n\t\t\t99: 'C',\n\t\t\t100: 'D',\n\t\t\t101: 'E',\n\t\t\t102: 'F',\n\t\t\t103: 'G',\n\t\t\t104: 'H',\n\t\t\t105: 'I',\n\t\t\t106: 'J',\n\t\t\t107: 'K',\n\t\t\t108: 'L',\n\t\t\t109: 'M',\n\t\t\t110: 'N',\n\t\t\t111: 'O',\n\t\t\t112: 'P',\n\t\t\t113: 'Q',\n\t\t\t114: 'R',\n\t\t\t115: 'S',\n\t\t\t116: 'T',\n\t\t\t117: 'U',\n\t\t\t118: 'V',\n\t\t\t119: 'W',\n\t\t\t120: 'X',\n\t\t\t121: 'Y',\n\t\t\t122: 'Z',\n\t\t\t13: 'Enter',\n\t\t\t16: 'Shift',\n\t\t\t17: 'Control',\n\t\t\t18: 'Alt',\n\t\t\t27: 'Escape',\n\t\t\t33: 'Page Up',\n\t\t\t34: 'Page Down',\n\t\t\t35: 'End',\n\t\t\t36: 'Home',\n\t\t\t37: 'Left Arrow',\n\t\t\t38: 'Up Arrow',\n\t\t\t39: 'Right Arrow',\n\t\t\t40: 'Down Arrow',\n\t\t\t45: 'Insert',\n\t\t\t46: 'Delete',\n\t\t\t48: '0',\n\t\t\t49: '1',\n\t\t\t50: '2',\n\t\t\t51: '3',\n\t\t\t52: '4',\n\t\t\t53: '5',\n\t\t\t54: '6',\n\t\t\t55: '7',\n\t\t\t56: '8',\n\t\t\t57: '9'\n\t\t}\n\t});\n\n});","define('reddit/services/session', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Service.extend({\n    auth: {\n      expires: function expires() {\n        return localStorage.authExpires;\n      },\n      state: function state() {\n        return localStorage.authState;\n      },\n      token: function token() {\n        return localStorage.authToken;\n      },\n      needed: function needed() {\n        if (!this.token() || this.expires() < new Date().getTime()) {\n          return true;\n        }\n        return false;\n      }\n    },\n    account: {\n      user: function user() {\n        if (!localStorage.accountUser) {\n          return null;\n        }\n        return JSON.parse(localStorage.accountUser);\n      }\n    },\n    set: function set(property, value) {\n      if (typeof value === 'object') {\n        localStorage[property] = JSON.stringify(value);\n      } else {\n        localStorage[property] = value;\n      }\n    }\n  });\n\n});","define('reddit/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 6,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"reddit/templates/application.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"p\");\n        var el2 = dom.createTextNode(\"\\n\tSigned in as \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(2);\n        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);\n        return morphs;\n      },\n      statements: [\n        [\"content\",\"model.user.name\",[\"loc\",[null,[2,14],[2,33]]]],\n        [\"content\",\"outlet\",[\"loc\",[null,[5,0],[5,10]]]]\n      ],\n      locals: [],\n      templates: []\n    };\n  }()));\n\n});","define('reddit/templates/authenticate', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 2,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"reddit/templates/authenticate.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        return morphs;\n      },\n      statements: [\n        [\"content\",\"outlet\",[\"loc\",[null,[1,0],[1,10]]]]\n      ],\n      locals: [],\n      templates: []\n    };\n  }()));\n\n});","define('reddit/templates/components/reddit-list', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        meta: {\n          \"revision\": \"Ember@1.13.7\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 1,\n              \"column\": 0\n            },\n            \"end\": {\n              \"line\": 3,\n              \"column\": 0\n            }\n          },\n          \"moduleName\": \"reddit/templates/components/reddit-list.hbs\"\n        },\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);\n          return morphs;\n        },\n        statements: [\n          [\"inline\",\"reddit-post\",[],[\"tagName\",\"li\",\"post\",[\"subexpr\",\"@mut\",[[\"get\",\"post\",[\"loc\",[null,[2,33],[2,37]]]]],[],[]],\"upVote\",\"upVote\",\"downVote\",\"downVote\"],[\"loc\",[null,[2,1],[2,75]]]]\n        ],\n        locals: [\"post\"],\n        templates: []\n      };\n    }());\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 4,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"reddit/templates/components/reddit-list.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        dom.insertBoundary(fragment, null);\n        return morphs;\n      },\n      statements: [\n        [\"block\",\"each\",[[\"get\",\"list\",[\"loc\",[null,[1,16],[1,20]]]]],[],0,null,[\"loc\",[null,[1,0],[3,9]]]]\n      ],\n      locals: [],\n      templates: [child0]\n    };\n  }()));\n\n});","define('reddit/templates/components/reddit-post', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          meta: {\n            \"revision\": \"Ember@1.13.7\",\n            \"loc\": {\n              \"source\": null,\n              \"start\": {\n                \"line\": 3,\n                \"column\": 2\n              },\n              \"end\": {\n                \"line\": 5,\n                \"column\": 2\n              }\n            },\n            \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"image\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var element2 = dom.childAt(fragment, [1]);\n            var morphs = new Array(1);\n            morphs[0] = dom.createAttrMorph(element2, 'style');\n            return morphs;\n          },\n          statements: [\n            [\"attribute\",\"style\",[\"concat\",[\"background-image:url(\",[\"get\",\"post.url\",[\"loc\",[null,[4,52],[4,60]]]],\")\"]]]\n          ],\n          locals: [],\n          templates: []\n        };\n      }());\n      var child1 = (function() {\n        return {\n          meta: {\n            \"revision\": \"Ember@1.13.7\",\n            \"loc\": {\n              \"source\": null,\n              \"start\": {\n                \"line\": 6,\n                \"column\": 2\n              },\n              \"end\": {\n                \"line\": 8,\n                \"column\": 2\n              }\n            },\n            \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createUnsafeMorphAt(fragment,1,1,contextualElement);\n            return morphs;\n          },\n          statements: [\n            [\"content\",\"post.html\",[\"loc\",[null,[7,3],[7,18]]]]\n          ],\n          locals: [],\n          templates: []\n        };\n      }());\n      var child2 = (function() {\n        return {\n          meta: {\n            \"revision\": \"Ember@1.13.7\",\n            \"loc\": {\n              \"source\": null,\n              \"start\": {\n                \"line\": 9,\n                \"column\": 2\n              },\n              \"end\": {\n                \"line\": 11,\n                \"column\": 2\n              }\n            },\n            \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"image\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var element1 = dom.childAt(fragment, [1]);\n            var morphs = new Array(1);\n            morphs[0] = dom.createAttrMorph(element1, 'style');\n            return morphs;\n          },\n          statements: [\n            [\"attribute\",\"style\",[\"concat\",[\"background-image:url(\",[\"get\",\"post.thumbnail\",[\"loc\",[null,[10,52],[10,66]]]],\")\"]]]\n          ],\n          locals: [],\n          templates: []\n        };\n      }());\n      var child3 = (function() {\n        return {\n          meta: {\n            \"revision\": \"Ember@1.13.7\",\n            \"loc\": {\n              \"source\": null,\n              \"start\": {\n                \"line\": 12,\n                \"column\": 2\n              },\n              \"end\": {\n                \"line\": 14,\n                \"column\": 2\n              }\n            },\n            \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"no-image\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() { return []; },\n          statements: [\n\n          ],\n          locals: [],\n          templates: []\n        };\n      }());\n      var child4 = (function() {\n        return {\n          meta: {\n            \"revision\": \"Ember@1.13.7\",\n            \"loc\": {\n              \"source\": null,\n              \"start\": {\n                \"line\": 15,\n                \"column\": 2\n              },\n              \"end\": {\n                \"line\": 19,\n                \"column\": 2\n              }\n            },\n            \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"album\");\n            var el2 = dom.createTextNode(\"\\n\\n\t\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() { return []; },\n          statements: [\n\n          ],\n          locals: [],\n          templates: []\n        };\n      }());\n      return {\n        meta: {\n          \"revision\": \"Ember@1.13.7\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 2,\n              \"column\": 1\n            },\n            \"end\": {\n              \"line\": 20,\n              \"column\": 1\n            }\n          },\n          \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(5);\n          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);\n          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);\n          morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);\n          morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);\n          morphs[4] = dom.createMorphAt(fragment,4,4,contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [\n          [\"block\",\"if\",[[\"get\",\"post.isImage\",[\"loc\",[null,[3,8],[3,20]]]]],[],0,null,[\"loc\",[null,[3,2],[5,9]]]],\n          [\"block\",\"if\",[[\"get\",\"post.isVideo\",[\"loc\",[null,[6,8],[6,20]]]]],[],1,null,[\"loc\",[null,[6,2],[8,9]]]],\n          [\"block\",\"if\",[[\"get\",\"post.isArticleThumbnail\",[\"loc\",[null,[9,8],[9,31]]]]],[],2,null,[\"loc\",[null,[9,2],[11,9]]]],\n          [\"block\",\"if\",[[\"get\",\"post.isArticleNoThumbnail\",[\"loc\",[null,[12,8],[12,33]]]]],[],3,null,[\"loc\",[null,[12,2],[14,9]]]],\n          [\"block\",\"if\",[[\"get\",\"post.isAlbum\",[\"loc\",[null,[15,8],[15,20]]]]],[],4,null,[\"loc\",[null,[15,2],[19,9]]]]\n        ],\n        locals: [],\n        templates: [child0, child1, child2, child3, child4]\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          meta: {\n            \"revision\": \"Ember@1.13.7\",\n            \"loc\": {\n              \"source\": null,\n              \"start\": {\n                \"line\": 21,\n                \"column\": 2\n              },\n              \"end\": {\n                \"line\": 23,\n                \"column\": 2\n              }\n            },\n            \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"image\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var element0 = dom.childAt(fragment, [1]);\n            var morphs = new Array(1);\n            morphs[0] = dom.createAttrMorph(element0, 'style');\n            return morphs;\n          },\n          statements: [\n            [\"attribute\",\"style\",[\"concat\",[\"background-image:url(\",[\"get\",\"post.thumbnail\",[\"loc\",[null,[22,52],[22,66]]]],\")\"]]]\n          ],\n          locals: [],\n          templates: []\n        };\n      }());\n      var child1 = (function() {\n        return {\n          meta: {\n            \"revision\": \"Ember@1.13.7\",\n            \"loc\": {\n              \"source\": null,\n              \"start\": {\n                \"line\": 23,\n                \"column\": 2\n              },\n              \"end\": {\n                \"line\": 25,\n                \"column\": 2\n              }\n            },\n            \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"no-image\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() { return []; },\n          statements: [\n\n          ],\n          locals: [],\n          templates: []\n        };\n      }());\n      return {\n        meta: {\n          \"revision\": \"Ember@1.13.7\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 20,\n              \"column\": 1\n            },\n            \"end\": {\n              \"line\": 26,\n              \"column\": 1\n            }\n          },\n          \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [\n          [\"block\",\"if\",[[\"get\",\"post.hasThumbnail\",[\"loc\",[null,[21,8],[21,25]]]]],[],0,1,[\"loc\",[null,[21,2],[25,9]]]]\n        ],\n        locals: [],\n        templates: [child0, child1]\n      };\n    }());\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 31,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"reddit/templates/components/reddit-post.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"display\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"info\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"class\",\"title\");\n        dom.setAttribute(el2,\"target\",\"_blank\");\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element3 = dom.childAt(fragment, [2, 1]);\n        var morphs = new Array(3);\n        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        morphs[1] = dom.createAttrMorph(element3, 'href');\n        morphs[2] = dom.createMorphAt(element3,0,0);\n        return morphs;\n      },\n      statements: [\n        [\"block\",\"if\",[[\"get\",\"post.isCurrent\",[\"loc\",[null,[2,7],[2,21]]]]],[],0,1,[\"loc\",[null,[2,1],[26,8]]]],\n        [\"attribute\",\"href\",[\"concat\",[[\"get\",\"post.url\",[\"loc\",[null,[29,12],[29,20]]]]]]],\n        [\"content\",\"post.title\",[\"loc\",[null,[29,54],[29,68]]]]\n      ],\n      locals: [],\n      templates: [child0, child1]\n    };\n  }()));\n\n});","define('reddit/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 2,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"reddit/templates/index.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        return morphs;\n      },\n      statements: [\n        [\"inline\",\"reddit-list\",[],[\"tagName\",\"ul\",\"elementId\",\"list\",\"list\",[\"subexpr\",\"@mut\",[[\"get\",\"list\",[\"loc\",[null,[1,49],[1,53]]]]],[],[]],\"nextPost\",\"nextPost\",\"previousPost\",\"previousPost\",\"upVote\",\"upVote\",\"downVote\",\"downVote\"],[\"loc\",[null,[1,0],[1,139]]]]\n      ],\n      locals: [],\n      templates: []\n    };\n  }()));\n\n});","define('reddit/tests/app.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function(assert) { \n    assert.ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/components/reddit-list.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/reddit-list.js should pass jshint', function(assert) { \n    assert.ok(true, 'components/reddit-list.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/components/reddit-post.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/reddit-post.js should pass jshint', function(assert) { \n    assert.ok(true, 'components/reddit-post.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/controllers/authenticate.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/authenticate.js should pass jshint', function(assert) { \n    assert.ok(true, 'controllers/authenticate.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/controllers/index.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/index.js should pass jshint', function(assert) { \n    assert.ok(true, 'controllers/index.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/helpers/resolver', ['exports', 'ember/resolver', 'reddit/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('reddit/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function(assert) { \n    assert.ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/helpers/start-app', ['exports', 'ember', 'reddit/app', 'reddit/config/environment'], function (exports, Ember, Application, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('reddit/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function(assert) { \n    assert.ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/initializers/services.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - initializers');\n  QUnit.test('initializers/services.js should pass jshint', function(assert) { \n    assert.ok(true, 'initializers/services.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/integration/components/reddit-list-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('reddit-list', 'Integration | Component | reddit list', {\n    integration: true\n  });\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'reddit-list', ['loc', [null, [1, 0], [1, 15]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.7',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'reddit-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n});","define('reddit/tests/integration/components/reddit-list-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/reddit-list-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'integration/components/reddit-list-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/integration/components/reddit-post-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('reddit-post', 'Integration | Component | reddit post', {\n    integration: true\n  });\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'reddit-post', ['loc', [null, [1, 0], [1, 15]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.7',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'reddit-post', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n});","define('reddit/tests/integration/components/reddit-post-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/reddit-post-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'integration/components/reddit-post-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/router.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function(assert) { \n    assert.ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/routes/application.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/application.js should pass jshint', function(assert) { \n    assert.ok(true, 'routes/application.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/routes/authenticate.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/authenticate.js should pass jshint', function(assert) { \n    assert.ok(true, 'routes/authenticate.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/routes/index.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/index.js should pass jshint', function(assert) { \n    assert.ok(true, 'routes/index.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/services/api.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - services');\n  QUnit.test('services/api.js should pass jshint', function(assert) { \n    assert.ok(true, 'services/api.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/services/keybindings.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - services');\n  QUnit.test('services/keybindings.js should pass jshint', function(assert) { \n    assert.ok(true, 'services/keybindings.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/services/session.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - services');\n  QUnit.test('services/session.js should pass jshint', function(assert) { \n    assert.ok(true, 'services/session.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/test-helper', ['reddit/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('reddit/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function(assert) { \n    assert.ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/controllers/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n});","define('reddit/tests/unit/controllers/application-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/application-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/controllers/authenticate-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:authenticate', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n});","define('reddit/tests/unit/controllers/authenticate-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/authenticate-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/controllers/authenticate-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/controllers/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n});","define('reddit/tests/unit/controllers/index-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/index-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/controllers/index-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/initializers/services-test', ['ember', 'reddit/initializers/services', 'qunit'], function (Ember, services, qunit) {\n\n  'use strict';\n\n  var registry, application;\n\n  qunit.module('Unit | Initializer | services', {\n    beforeEach: function beforeEach() {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        registry = application.registry;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  qunit.test('it works', function (assert) {\n    services.initialize(registry, application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n\n});","define('reddit/tests/unit/initializers/services-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/initializers');\n  QUnit.test('unit/initializers/services-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/initializers/services-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/models/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel('application', 'Unit | Model | application', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n});","define('reddit/tests/unit/models/application-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/application-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/models/application-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/routes/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n});","define('reddit/tests/unit/routes/application-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/application-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/routes/authenticate-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:authenticate', 'Unit | Route | authenticate', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n});","define('reddit/tests/unit/routes/authenticate-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/authenticate-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/routes/authenticate-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/routes/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n});","define('reddit/tests/unit/routes/index-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/index-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/services/ajax-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('service:ajax', 'Unit | Service | ajax', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n\n});","define('reddit/tests/unit/services/ajax-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/ajax-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/services/ajax-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/services/api-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('service:api', 'Unit | Service | api', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n\n});","define('reddit/tests/unit/services/api-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/api-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/services/api-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/services/keybindings-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('service:keybindings', 'Unit | Service | keybindings', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n\n});","define('reddit/tests/unit/services/keybindings-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/keybindings-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/services/keybindings-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/services/session-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('service:session', 'Unit | Service | session', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n\n});","define('reddit/tests/unit/services/session-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/session-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/services/session-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/unit/utils/ajax-test', ['reddit/utils/ajax', 'qunit'], function (ajax, qunit) {\n\n  'use strict';\n\n  qunit.module('Unit | Utility | ajax');\n\n  // Replace this with your real tests.\n  qunit.test('it works', function (assert) {\n    var result = ajax['default']();\n    assert.ok(result);\n  });\n\n});","define('reddit/tests/unit/utils/ajax-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils');\n  QUnit.test('unit/utils/ajax-test.js should pass jshint', function(assert) { \n    assert.ok(true, 'unit/utils/ajax-test.js should pass jshint.'); \n  });\n\n});","define('reddit/tests/utils/ajax.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - utils');\n  QUnit.test('utils/ajax.js should pass jshint', function(assert) { \n    assert.ok(true, 'utils/ajax.js should pass jshint.'); \n  });\n\n});","define('reddit/utils/ajax', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n\n\n  exports['default'] = ajax;\n  function ajax() {\n    return {\n      post: function post(url, data, other) {\n        return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n          Ember['default'].$.ajax({\n            type: 'POST',\n            url: url,\n            headers: other.headers ? other.headers : {},\n            data: data,\n            success: function success(response) {\n              resolve(response);\n            },\n            error: function error(response) {\n              reject(response);\n            }\n          });\n        });\n      },\n      get: function get(url, data, other) {\n        return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n          Ember['default'].$.ajax({\n            type: 'GET',\n            url: url,\n            headers: other.headers ? other.headers : {},\n            data: data,\n            success: function success(response) {\n              resolve(response);\n            },\n            error: function error(response) {\n              reject(response);\n            }\n          });\n        });\n      }\n    };\n  }\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('reddit/config/environment', ['ember'], function(Ember) {\n  var prefix = 'reddit';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"reddit/tests/test-helper\");\n} else {\n  require(\"reddit/app\")[\"default\"].create({\"name\":\"reddit\",\"version\":\"0.0.0+ac586fdc\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjzDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdptCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1cA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"reddit.js"}